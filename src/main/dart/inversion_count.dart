import 'dart:io';

void trace(String message) {
  stderr.writeln("${message}");
}

class Generator implements Iterator<int> {
  final int m, a;
  int _current;

  Generator(this.m, this.a, int s) {
    _current = s;
  }

  @override
  int get current => _current;

  int computeNext(int current) {
    // X(n+1) = A * X(n) % M
    return (a * current) % m;
  }

  @override
  bool moveNext() {
    _current = computeNext(_current);

    return true;
  }
}

void main() {
  var inputs = stdin.readLineSync().split(' ');
  var M = int.parse(inputs[0]);
  var A = int.parse(inputs[1]);
  var S = int.parse(inputs[2]);
  var N = int.parse(inputs[3]);

  trace("${M} ${A} ${S} ${N}");

  // List containing the array generated by the LGC
  var array = List<int>(N);

  var generator = Generator(M, A, S);

  for (int i = 0; i < N; i++) {
    generator.moveNext();

    array[i] = generator.current;
  }

  // trace("${array}");

  var count = 0;

  for (var i = 0; i < array.length; i++) {
    for (var j = 0; j < i; j++) {
      if (array[j] > array[i]) {
        count++;
      }
    }
  }

  print(count);
}
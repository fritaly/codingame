import 'dart:io';

void trace(String message) {
  stderr.writeln("${message}");
}

class Generator implements Iterator<int> {
  int _m, _a, _xn;

  Generator(int m, int a, int s) {
    _m = m;
    _a = a;
    _xn = s;
  }

  @override
  int get current {
    // X(n+1) = A * X(n) % M
    return (_a * _xn) % _m;
  }

  @override
  bool moveNext() {
    _xn = current;

    return true;
  }
}

void main() {
  var inputs = stdin.readLineSync().split(' ');
  var M = int.parse(inputs[0]);
  var A = int.parse(inputs[1]);
  var S = int.parse(inputs[2]);
  var N = int.parse(inputs[3]);

  trace("${M} ${A} ${S} ${N}");

  // The inversion count
  var count = 0;

  // List containing the values generated by the LGC
  var values = <int>[];

  var generator = Generator(M, A, S);

  for (int i = 0; i < N; i++) {
    var value = generator.current;

    trace("${value}");

    // Increment the counter by the number of values previously generated which
    // are greater than the new value
    count += values.where((n) => (n > value)).length;

    values.add(value);

    generator.moveNext();
  }

  print('${count}');
}